`timescale 1ns / 1ps
module test();

   
	reg CLOCK_50;
	
    reg Reset;
    reg [4:0] read_register_1;
    reg [4:0] read_register_2;
    reg [31:0] write_data;
	reg reg_write_enable;        // Control signal from ControlUnit for register write
     reg [4:0] reg_write_address; // Control signal from ControlUnit for write address
    wire [31:0] read_data_1;     // read data rs
    wire  [31:0] read_data_2;
	 wire [31:0]r0,r1,r2;
	 wire [31:0]rin0;
	  RegisterFile regf(
    CLOCK_50,
     Reset,
    read_register_1,
     read_register_2,
    reg_write_enable,
    write_data,
     reg_write_address, // Control signal from ControlUnit for write address
    read_data_1,     // read data rs
    read_data_2 ,	 // read data rt
	rin0,r0,r1,r2
);
	parameter CLOCK_PERIOD=2;
	
	
	
	initial begin
			CLOCK_50 <= 1'b1;
		end // initial
		always @ (*)
		begin : Clock_Generator
			#((CLOCK_PERIOD) / 2) 
			CLOCK_50 <= ~CLOCK_50;
		end
	
	
	initial
	begin
	
	Reset<=1;
	 #0.05;Reset<=0;
	end
	
	

	
	
	
	initial
	begin

	#2;read_register_1=1;read_register_2=2;reg_write_address=1;write_data=32'd1;reg_write_enable=1;//wirte 1 on r1
	#2;read_register_1=1;read_register_2=2;reg_write_address=2;write_data=32'd2;reg_write_enable=1;//wirte 2 on r2
	#2;read_register_1=1;read_register_2=2;reg_write_address=2;write_data=32'd2;reg_write_enable=0;
	//it should read 0/0 and write 1 on r1
	// it should read 1/0 and write 2 on r2
	//it should only read 1/2

	

		
	
	
	
	
	
	
	
	
	
	end
	
	
	
	initial
	begin
	#1000 $stop;
	end
	initial
  begin
    $dumpfile("dump.vcd");
    $dumpvars(1);
  end
	
	

endmodule
